{"version":3,"file":"rebolon-ngx-address-data-gouv-search.mjs","sources":["../../../projects/ngx-address-data-gouv-search/src/lib/ngx-address-data-gouv.service.ts","../../../projects/ngx-address-data-gouv-search/src/lib/ngx-address-data-gouv.component.ts","../../../projects/ngx-address-data-gouv-search/src/public-api.ts","../../../projects/ngx-address-data-gouv-search/src/rebolon-ngx-address-data-gouv-search.ts"],"sourcesContent":["import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { EMPTY, map, Observable, shareReplay } from 'rxjs';\nimport { AddressAPIProperties, AddressAPIResult } from './ngx-address-data-gouv';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class Service {\n  #uri = 'https://api-adresse.data.gouv.fr';\n\n  /**\n   * Allow to change the uri if you host your own addressDataGouv service\n   */\n  set uri(uri: string) {\n    if (uri.trim() === \"\") {\n      return;\n    }\n    this.#uri = uri;\n  }\n\n  get urlSearch() {\n    return `${this.#uri}/search/`;\n  }\n\n  constructor(private api: HttpClient) {}\n\n  protected get(loadOptions: any): Observable<AddressAPIResult[]> {\n    const options = {\n      params: new HttpParams().set('autocomplete', '0').set('limit', '5'),\n      headers: new HttpHeaders().set('Accept', 'application/json'),\n    };\n\n    if (loadOptions.autocomplete) {\n      options.params = options.params.set('autocomplete', loadOptions.autocomplete.toString());\n    }\n\n    if (loadOptions.limit) {\n      options.params = options.params.set('limit', loadOptions.limit.toString());\n    }\n\n    if (loadOptions.q) {\n      options.params = options.params.set('q', loadOptions.q);\n    } else {\n      return EMPTY;\n    }\n\n    return this.api\n      .request<{features: AddressAPIResult[]}>('GET', this.urlSearch, options)\n      .pipe(\n        map((data) => data.features),\n        shareReplay(1)\n      ) as Observable<AddressAPIResult[]>;\n  }\n\n  search(\n    text: string, limit = 5, type: AddressAPIProperties['type'] = 'housenumber', autocomplete: 0|1 = 0\n  ): Observable<AddressAPIResult[]> {\n    return this.get({q: text, limit, type, autocomplete});\n  }\n}\n","import {Component, effect, inject, input, OnDestroy, Output} from '@angular/core';\nimport {BehaviorSubject, debounceTime, filter, Observable, ReplaySubject, Subject, switchMap, takeUntil} from 'rxjs';\nimport {Service} from './ngx-address-data-gouv.service';\nimport {AddressAPIResult} from './ngx-address-data-gouv';\nimport {AsyncPipe, CommonModule, NgFor, NgStyle} from '@angular/common';\nimport {HttpClient} from '@angular/common/http';\n\n@Component({\n  standalone: true,\n  imports: [NgStyle, AsyncPipe, CommonModule,],\n  selector: 'ngx-address-data-gouv-search',\n  template: `\n    @if (id()) {\n      <label for=\"{{id()}}\">{{ label() }}</label>\n    }\n\n    <input\n      id=\"{{id()}}\"\n      [placeholder]=\"placeholder()\"\n      [ngStyle]=\"{ width: width()+'px' }\"\n      [value]=\"inputValue | async\"\n      (keyup)=\"onKeyUp($event)\"/>\n    <ul [ngStyle]=\"{ 'width': width()+'px', 'border': (listAddressesForStylish | async) ? '0.2px solid #ccc' : '0px' }\">\n      @for (addressList of listAddresses | async; track addressList; let isOdd = $odd) {\n        <li (click)=\"selectAddress(addressList)\"\n            [ngStyle]=\"{ 'background-color': isOdd ? '#fafafa' : '#f0f0f0'}\">\n          <span>{{ addressList.properties.label }}</span>\n        </li>\n      }\n    </ul>\n  `,\n  styles:\n    `\n    input {\n        border: 0.2px solid #ccc;\n    }\n\n    ul {\n        padding-inline-start: 0px;\n        margin-block-start: 0em;\n    }\n\n    li {\n        list-style-type: none;\n        cursor: pointer;\n    }\n\n    li:hover {\n        padding-left: 5px;\n    }\n    `\n  ,\n  providers: [\n    HttpClient,\n    Service\n  ],\n})\nexport class AddressSearchComponent implements OnDestroy {\n  protected service: Service = inject(Service);\n\n  // data store containers\n  protected selectedAddress$: BehaviorSubject<AddressAPIResult> = new BehaviorSubject({} as AddressAPIResult);\n  protected listAddresses$: Subject<AddressAPIResult[]> = new Subject() as Subject<AddressAPIResult[]>;\n  listAddresses: Observable<AddressAPIResult[]> = this.listAddresses$.asObservable();\n  listAddressesForStylish: Observable<AddressAPIResult[]> = this.listAddresses\n    .pipe(\n      // prevent the border style to be displayed when there is an emition of empty/null/undefined/empty array\n      filter((data: AddressAPIResult[]) => data.length > 0)\n    );\n  protected inputValue: BehaviorSubject<string> = new BehaviorSubject(\"\");\n\n  // components API\n  loaderSize = input('15');\n  width = input('250');\n  placeholder = input('');\n  label = input('');\n  id = input('ngx-address-search-component-' + (new Date()).getTime());\n  uri = input('');\n  @Output() isLoading: ReplaySubject<boolean> = new ReplaySubject(1);\n  @Output() addressFound: Observable<AddressAPIResult> = this.selectedAddress$.asObservable().pipe(\n    filter((value: any) => value && typeof value === 'object' && value.type !== 'undefined')\n  );\n\n  // Memory leak prevention\n  protected ngUnsubscribe: Subject<void> = new Subject();\n\n  constructor() {\n    effect(() => this.service.uri = this.uri())\n\n    this.isLoading.next(false);\n\n    this.inputValue.asObservable().pipe(\n      takeUntil(this.ngUnsubscribe),\n      debounceTime(250),\n      filter((value: string) => value.trim().length > 3),\n      filter((value: string) =>\n        !this.selectedAddress$.getValue().properties\n        || value !== this.selectedAddress$.getValue().properties.label\n      ),\n    ).subscribe(\n      () => this.isLoading.next(true)\n    );\n\n    this.inputValue.asObservable().pipe(\n      takeUntil(this.ngUnsubscribe),\n      debounceTime(750),\n      filter((value: string) => value.trim().length > 3),\n      filter((value: string) =>\n        !this.selectedAddress$.getValue().properties\n        || value !== this.selectedAddress$.getValue().properties.label\n      ),\n      switchMap((data: string) => this.service.search(data))\n    ).subscribe((data: AddressAPIResult[]) => {\n      this.listAddresses$.next(data);\n      this.isLoading.next(false);\n    });\n  }\n\n  // clean memory\n  ngOnDestroy(): void {\n    this.ngUnsubscribe.next();\n    this.ngUnsubscribe.complete();\n  }\n\n  onKeyUp(event: Event): void {\n    const value = (event.currentTarget as HTMLInputElement).value;\n    if (value === this.inputValue.getValue()) {\n      return;\n    }\n\n    this.inputValue.next(value);\n  }\n\n  // @todo : is there a way to code thos 3 lines in a way where order is not important ? here if i move the\n  // inputValue.next then it can call again the Api\n  selectAddress(address: AddressAPIResult) {\n    // save the selected address\n    this.selectedAddress$.next(address);\n    // clear the list\n    this.listAddresses$.next([]);\n    // change value of the input\n    this.inputValue.next(address.properties.label);\n  }\n}\n","/*\n * Public API Surface of ng-address-data-gouv\n */\n\nexport * from './lib/ngx-address-data-gouv.service';\nexport * from './lib/ngx-address-data-gouv.component';\nexport * from './lib/ngx-address-data-gouv';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}